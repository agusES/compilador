package ejemplo.jflex;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.lang.NumberFormatException;
import java.lang.IllegalArgumentException;
import java.lang.TypeNotPresentException;
import java.lang.Throwable;
import ejemplo.nodos.*;

class MiParser;



parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }
    public Map<String, Simbolo> tablaDeSimbolos = new HashMap<String, Simbolo>();

:};


terminal MAIN, CONST, LLAVEABRE, LLAVECIERRA, ID, VARS, INT, FLOAT, BOOLEAN, IF, THEN, ELSE, WHILE, DO , UNTIL, REPEAT, MAS, MENOS, POR, DIVIDIDO, SHOW;
terminal MAYOR, MENOR, EQUAL, DIFF, MAYOREQUAL, MENOREQUAL, PUNTO_COMA, COMA, TRUE, FALSE, AND, OR, BETWEEN, STRING, PARENABRE, PARENCIERRA, IGUAL, DOSPUNTOS, ENTERO, FLOTANTE;
nonterminal programa, const, constantes, constante, vars, sentencias, variables, variable, termino, factor, comparador, termbool;
nonterminal expbool, between, bloque, ids, sentencia, asig, asigs, if, while, until, condicion, exp, tipo, show;

start with programa;

programa ::= MAIN const vars sentencias:ss
            {:  
                List<Nodo> sentencias = (List<Nodo>) ss;
                Nodo bloque = new Bloque(sentencias);
                bloque.setNombre("Main");
                System.out.println("Soy un Programa");
                RESULT = bloque;
            :} | MAIN const sentencias:ss {:
                List<Nodo> sentencias = (List<Nodo>) ss;
                Nodo bloque = new Bloque(sentencias);
                bloque.setNombre("Main");
                System.out.println("Soy un Programa");
                RESULT = bloque;
            :}
;

bloque ::= LLAVEABRE sentencias:s LLAVECIERRA {: 
        System.out.println("Soy un bloque"); 
        Nodo bloque = new Bloque((List<Nodo>) s);
        RESULT=bloque;
:};


sentencias ::= sentencias:ss sentencia:s {: 
    System.out.println("Soy muchas sentencias");
    List<Nodo> bloque = (List<Nodo>) ss;
    bloque.add((Nodo) s);
    RESULT = bloque;
:} 
| sentencia:s {:
    List<Nodo> bloque = new ArrayList<Nodo>();
    System.out.println("Soy una sentencia");
    bloque.add((Nodo) s);
    RESULT = bloque;
:};

const ::= CONST LLAVEABRE constantes LLAVECIERRA{:  
                System.out.println("SECTOR CONSTANTES");
           
:};


constantes ::= constante {:
                System.out.println("UNA CONSTANTE");

            :}| constantes constante {:
                System.out.println("VARIAS CONSTANTES");
:};

constante ::= ID:id DOSPUNTOS tipo:t IGUAL exp:e PUNTO_COMA{:
                System.out.println("CONSTANTE");
                String tipo;
                String key = id.toString();
                Constante exp = (Constante) e;
                switch(t.toString()){
                    case "int":
                        tipo = "int";
                        if (!(Integer.class.isInstance(exp.getValor()))) {
                            System.out.println("ERROR EN TIPO ENTERO");
                            throw new IllegalArgumentException ("El argumento debe ser un número entero");
                        }
                        break;
                    case "float":
                        tipo = "float";
                        if (!(Float.class.isInstance(e))) {
                            System.out.println("ERROR EN TIPO FLOTANTE");
                            throw new IllegalArgumentException ("El argumento debe ser un número flotante");
                        }
                        break;
                    case "boolean":
                        tipo = "boolean";
                        if (e != ".T." && e != ".F.") {
                            System.out.println("ERROR EN TIPO BOOLEANO");
                            throw new IllegalArgumentException ("El argumento debe ser una expresion booleana");
                        }
                        break;
                    default:
                        System.out.println("NO ES UN TIPO");
                        throw new Exception ("Tipo de dato inexistente"); 
                }
                Simbolo s = new Simbolo(key, exp.getValor().toString(), tipo, true);
                if (tablaDeSimbolos.containsKey(key)) {
                    throw new Exception("Constante ya definida");
                } else {
                    tablaDeSimbolos.put(key, s);
                }
                System.out.println("Tabla: " + tablaDeSimbolos.toString());

                
                
:};

vars ::= VARS LLAVEABRE variables LLAVECIERRA
            {:  
                System.out.println("SECTOR VARIABLES");
            :};

tipo ::= INT:i {:
            System.out.println("Soy un tipo ENTERO");
            RESULT = i;
            :} 
            | FLOAT:f {:
                System.out.println("Soy un tipo FLOAT");
                RESULT = f;
            :}
            | BOOLEAN:b {:
                System.out.println("Soy un tipo BOOLEAN");
                RESULT = b;
            :};

variables ::= variable {:
                System.out.println("UNA VARIABLE");

            :} |
              variables variable {:
                System.out.println("VARIAS VARIABLES");
            :};

variable ::= ids:ids DOSPUNTOS tipo:t PUNTO_COMA{:
                System.out.println("VARIABLE");
                String tipo;
                switch(t.toString()){
                    case "int":
                        tipo = "int";
                        break;
                    case "float":
                        tipo = "float";
                        
                        break;
                    case "boolean":
                        tipo = "boolean";                        
                        break;
                    default:
                        System.out.println("NO ES UN TIPO");
                        throw new Exception ("Tipo de dato inexistente"); 
                }
                List<Nodo> listaNodos = new ArrayList<Nodo>(idss);
                for (Nodo variable : listaNodos) {                
                    Simbolo s = new Simbolo(variable.getValor(), null, t);
                }
                if (tablaDeSimbolos.containsKey(key)) {
                    throw new Exception("Constante ya definida");
                } else {
                    tablaDeSimbolos.put(key, s);
                }
                System.out.println("Tabla: " + tablaDeSimbolos.toString());

            :};

ids ::= ID:id {:
        System.out.println("UN ID");
        List<Nodo> listaIds = new ArrayList<Nodo>();
        listaIds.add((Nodo) new Identificador(id.toString()));
        RESULT = listaIds;
        :} 
        | ids:idss COMA ID:id {:
                System.out.println("VARIOS IDS");
                idss.add((Nodo) new Identificador(id.toString()));
                RESULT = idss;
        :};

sentencia ::= asig:a PUNTO_COMA{: 
                System.out.println("Soy una asignacion simple en una sentencia");
                RESULT = (Nodo) a;
:} 
            | if:i {:
                System.out.println("Sou un if en una sentencia");
                RESULT = (Nodo) i;
:} 
            | while:w {: 
                System.out.println("Soy un while en una sentencia");
                 RESULT = (Nodo) w;
:} 
            | show:s PUNTO_COMA {: 
                System.out.println("Soy un show en una sentencia");
                RESULT = (Nodo) s;
:};

asig ::= ID:i IGUAL exp:e {:
    System.out.println("soy una asignacion comun");
    Identificador id = new Identificador(i.toString());
    Nodo ex = (Nodo) e;
    RESULT = new AsignacionSimple(id, ex);
:}| ID IGUAL expbool{:System.out.println("soy una asignacion booleana"); :};

asigs ::= ID IGUAL asig {:
    System.out.println("Soy una asignacion simple");
:} | ID IGUAL asigs {:
    System.out.println("Soy una asignacion compleja");
:};

if ::= IF condicion:c THEN bloque:b {: 
                Nodo cond = (Nodo) c;
                Nodo bloque = (Nodo) b;
                bloque.setNombre("Then");
                RESULT = new IfThen(cond, bloque);
       :} |
       IF condicion:c THEN bloque:bloqueThen ELSE bloque:bloqueElse {:
                System.out.println("Soy un if con else");
                Nodo cond = (Nodo) c;
                Nodo bloqueT = (Nodo) bloqueThen;
                bloqueT.setNombre("Then");
                Nodo bloqueE = (Nodo) bloqueElse;
                bloqueE.setNombre("Else");
                RESULT = new IfThenElse(cond, bloqueT, bloqueE);
       :};

while ::= WHILE condicion:c DO bloque:b {:
        System.out.println("Soy un while");
        Nodo cond = (Nodo) c;
        Nodo bloque = (Nodo) b;
        bloque.setNombre("Bloque While");
        Nodo w = new While(cond, bloque);
        RESULT = w;
:};

until ::= UNTIL condicion:c REPEAT bloque:b {:System.out.println("Soy un until");:};

show ::= SHOW PARENABRE STRING:s PARENCIERRA {:
        System.out.println("Soy un show con string: " + s.toString());
        String cadena = s.toString();
        Nodo constanteString = new ConstanteString(cadena);
        Nodo show = new Show(constanteString);
        RESULT = show;
:};

between ::= exp:e1 BETWEEN exp:e2 AND exp:e3 {:
    Nodo valor = (Nodo) e1;
    Nodo inf = (Nodo) e2;
    Nodo sup = (Nodo) e3;
    RESULT = new Between(valor, inf, sup);
:};

condicion ::= comparador:c {: RESULT= c;:}
 | PARENABRE expbool:e PARENCIERRA {: RESULT=e;:};


comparador ::= PARENABRE exp:e1 MAYOR exp:e2 PARENCIERRA{:
        Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Mayor(izq, der);
:} | PARENABRE exp:e1 MENOR exp:e2 PARENCIERRA{: 
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Menor(izq, der);
:} | PARENABRE exp:e1 EQUAL exp:e2 PARENCIERRA {: 
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Igual(izq, der);
:} | PARENABRE exp:e1 DIFF exp:e2 PARENCIERRA {:   
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Distinto(izq, der);
:} | PARENABRE exp:e1 MAYOREQUAL exp:e2 PARENCIERRA {: 
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new MayorIgual(izq, der);
:} | PARENABRE exp:e1 MENOREQUAL exp:e2 PARENCIERRA {: 
        Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new MenorIgual(izq, der); :};


exp ::= exp:e MAS termino:t {:
                Nodo exp = (Nodo) e;
                Nodo ter = (Nodo) t;
                Nodo nodo = new Suma(exp,ter);
                System.out.println("expresion::=expresion+factor;");
                RESULT = nodo;
            :}
            |
            exp:e MENOS termino:t {:
                Nodo exp = (Nodo) e;
                Nodo ter = (Nodo) t;
                Nodo nodo = new Resta(exp,ter);
                System.out.println("expresion::=expresion-factor;");
                RESULT = nodo;
            :}
             |
             termino:t {:
                System.out.println("expresion::=termino;");
                RESULT= (Nodo) t;
            :};

termbool ::= TRUE:t {:
                
                RESULT= new ConstanteBooleana(true);
            :}
            | FALSE:f{:
                RESULT= new ConstanteBooleana(false);
            :}
            |
            between:b {:
                RESULT= (Nodo) b;
            :}
            | condicion: c {: System.out.println("Soy una condicion en termino bool");
                RESULT= (Nodo) c; :};

expbool ::=  expbool:e1 AND:a termbool:e2 {:
            Nodo izquierdo = (Nodo) e1;
            Nodo derecho = (Nodo) e2;
            RESULT= new And(izquierdo, derecho);
        :}
            | expbool:e3 OR:o termbool:e4 {:
             Nodo izquierdo = (Nodo) e3;
            Nodo derecho = (Nodo) e4;
            RESULT= new Or(izquierdo, derecho);:}
            | termbool:t {: 
                 RESULT= (Nodo) t;
                :};

termino ::= termino:t POR factor:f {:
                Nodo ter = (Nodo) t;
                Nodo fac = (Nodo) f;
                Nodo nodo = new Multiplicacion(ter,fac); 
                System.out.println("termino::=factor*termino;");
                RESULT = nodo;
            :}
            |
            termino:t DIVIDIDO factor:f {:
                Nodo ter = (Nodo) t;
                Nodo fac = (Nodo) f;
                Nodo nodo = new Division(ter,fac); 
                System.out.println("termino::=factor/termino;");
                RESULT = nodo;
            :}
            |
            factor:f {:
                 RESULT= (Nodo) f;
            :}; 
factor ::= ENTERO:e {:
            Integer entero = null;
            try{
                entero = Integer.valueOf(e.toString());
            }catch(NumberFormatException  ex){
                System.out.println("El valor no corresponde a un número entero");
            }    
            RESULT= new Constante(entero);
             :}
             | FLOTANTE:f {:
             Float flotante = null;
             try{
                flotante = Float.valueOf(f.toString());
            }catch(NumberFormatException  ex){
                System.out.println("El valor no corresponde a un número flotante");
            }    
            RESULT= new ConstanteFlotante(flotante);
             :}
             |
             ID:identificador {:
                RESULT = new Identificador(identificador.toString());
             :}
            |
            PARENABRE exp:e PARENCIERRA {:
                RESULT = (Nodo) e;
            :};