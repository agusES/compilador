
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ejemplo.jflex;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.lang.NumberFormatException;
import java.lang.IllegalArgumentException;
import java.lang.TypeNotPresentException;
import java.lang.Throwable;
import ejemplo.nodos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\020\005\000\002\007\004\000\002\007\003" +
    "\000\002\003\006\000\002\004\003\000\002\004\004\000" +
    "\002\005\010\000\002\006\006\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\010\003\000\002\010" +
    "\004\000\002\011\006\000\002\021\003\000\002\021\005" +
    "\000\002\022\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\004\000\002\023\005\000\002\023\005\000\002" +
    "\024\005\000\002\024\005\000\002\025\006\000\002\025" +
    "\010\000\002\026\006\000\002\027\006\000\002\033\006" +
    "\000\002\017\007\000\002\030\003\000\002\030\005\000" +
    "\002\014\007\000\002\014\007\000\002\014\007\000\002" +
    "\014\007\000\002\014\007\000\002\014\007\000\002\031" +
    "\005\000\002\031\005\000\002\031\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\004\005\001\002\000\004\002\172\001" +
    "\002\000\004\005\006\001\002\000\004\006\157\001\002" +
    "\000\014\010\016\011\015\015\014\020\011\030\021\001" +
    "\002\000\016\002\uffed\007\uffed\010\uffed\015\uffed\020\uffed" +
    "\030\uffed\001\002\000\004\047\142\001\002\000\016\002" +
    "\ufffc\007\ufffc\010\ufffc\015\ufffc\020\ufffc\030\ufffc\001\002" +
    "\000\016\002\uffec\007\uffec\010\uffec\015\uffec\020\uffec\030" +
    "\uffec\001\002\000\004\047\142\001\002\000\004\006\123" +
    "\001\002\000\004\051\033\001\002\000\012\010\016\015" +
    "\014\020\011\030\021\001\002\000\004\037\031\001\002" +
    "\000\004\047\026\001\002\000\004\037\025\001\002\000" +
    "\014\002\uffff\010\016\015\014\020\011\030\021\001\002" +
    "\000\016\002\ufffd\007\ufffd\010\ufffd\015\ufffd\020\ufffd\030" +
    "\ufffd\001\002\000\016\002\uffeb\007\uffeb\010\uffeb\015\uffeb" +
    "\020\uffeb\030\uffeb\001\002\000\004\046\027\001\002\000" +
    "\004\050\030\001\002\000\004\037\uffe2\001\002\000\016" +
    "\002\uffee\007\uffee\010\uffee\015\uffee\020\uffee\030\uffee\001" +
    "\002\000\014\002\000\010\016\015\014\020\011\030\021" +
    "\001\002\000\016\010\044\041\036\042\043\047\047\053" +
    "\035\054\041\001\002\000\010\037\uffe9\043\115\044\117" +
    "\001\002\000\040\024\uffcb\025\uffcb\026\uffcb\027\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\050\uffcb\001\002\000\012\037" +
    "\uffd5\043\uffd5\044\uffd5\050\uffd5\001\002\000\040\024\uffd6" +
    "\025\uffd6\026\103\027\102\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\050\uffd6\001\002\000\012\024\060\025\054\037\uffea\045" +
    "\061\001\002\000\040\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\043\uffca\044\uffca\045\uffca\050\uffca\001\002\000\016" +
    "\016\uffe0\021\uffe0\037\uffe0\043\uffe0\044\uffe0\050\uffe0\001" +
    "\002\000\012\037\uffd4\043\uffd4\044\uffd4\050\uffd4\001\002" +
    "\000\040\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\050\uffc9\001\002\000\012\037\uffd2\043" +
    "\uffd2\044\uffd2\050\uffd2\001\002\000\040\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\043\uffcc\044\uffcc\045\uffcc\050\uffcc" +
    "\001\002\000\016\010\044\041\036\042\043\047\047\053" +
    "\035\054\041\001\002\000\012\037\uffcf\043\uffcf\044\uffcf" +
    "\050\uffcf\001\002\000\012\037\uffd3\043\uffd3\044\uffd3\050" +
    "\uffd3\001\002\000\010\043\115\044\117\050\116\001\002" +
    "\000\026\024\060\025\054\031\062\032\055\033\057\034" +
    "\063\035\056\036\064\045\061\050\065\001\002\000\012" +
    "\010\044\047\066\053\035\054\041\001\002\000\012\010" +
    "\044\047\066\053\035\054\041\001\002\000\012\010\044" +
    "\047\066\053\035\054\041\001\002\000\012\010\044\047" +
    "\066\053\035\054\041\001\002\000\012\010\044\047\066" +
    "\053\035\054\041\001\002\000\012\010\044\047\066\053" +
    "\035\054\041\001\002\000\012\010\044\047\066\053\035" +
    "\054\041\001\002\000\012\010\044\047\066\053\035\054" +
    "\041\001\002\000\012\010\044\047\066\053\035\054\041" +
    "\001\002\000\040\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\050\uffc8\001\002\000\012\010" +
    "\044\047\066\053\035\054\041\001\002\000\010\024\060" +
    "\025\054\050\070\001\002\000\016\016\uffd9\021\uffd9\037" +
    "\uffd9\043\uffd9\044\uffd9\050\uffd9\001\002\000\010\024\060" +
    "\025\054\050\065\001\002\000\010\024\060\025\054\050" +
    "\073\001\002\000\016\016\uffdb\021\uffdb\037\uffdb\043\uffdb" +
    "\044\uffdb\050\uffdb\001\002\000\010\024\060\025\054\050" +
    "\075\001\002\000\016\016\uffde\021\uffde\037\uffde\043\uffde" +
    "\044\uffde\050\uffde\001\002\000\010\024\060\025\054\043" +
    "\077\001\002\000\012\010\044\047\066\053\035\054\041" +
    "\001\002\000\016\024\060\025\054\037\uffe1\043\uffe1\044" +
    "\uffe1\050\uffe1\001\002\000\040\024\uffd8\025\uffd8\026\103" +
    "\027\102\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\043\uffd8\044\uffd8\045\uffd8\050\uffd8\001\002" +
    "\000\012\010\044\047\066\053\035\054\041\001\002\000" +
    "\012\010\044\047\066\053\035\054\041\001\002\000\040" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\043\uffce\044\uffce" +
    "\045\uffce\050\uffce\001\002\000\040\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\043\uffcd\044\uffcd\045\uffcd\050\uffcd\001" +
    "\002\000\010\024\060\025\054\050\107\001\002\000\016" +
    "\016\uffdc\021\uffdc\037\uffdc\043\uffdc\044\uffdc\050\uffdc\001" +
    "\002\000\010\024\060\025\054\050\111\001\002\000\016" +
    "\016\uffda\021\uffda\037\uffda\043\uffda\044\uffda\050\uffda\001" +
    "\002\000\010\024\060\025\054\050\113\001\002\000\016" +
    "\016\uffdd\021\uffdd\037\uffdd\043\uffdd\044\uffdd\050\uffdd\001" +
    "\002\000\040\024\uffd7\025\uffd7\026\103\027\102\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\050\uffd7\001\002\000\016\010\044" +
    "\041\036\042\043\047\047\053\035\054\041\001\002\000" +
    "\016\016\uffdf\021\uffdf\037\uffdf\043\uffdf\044\uffdf\050\uffdf" +
    "\001\002\000\016\010\044\041\036\042\043\047\047\053" +
    "\035\054\041\001\002\000\010\024\060\025\054\045\061" +
    "\001\002\000\012\037\uffd0\043\uffd0\044\uffd0\050\uffd0\001" +
    "\002\000\012\037\uffd1\043\uffd1\044\uffd1\050\uffd1\001\002" +
    "\000\004\010\124\001\002\000\006\040\ufff0\052\ufff0\001" +
    "\002\000\006\007\ufff3\010\ufff3\001\002\000\006\040\132" +
    "\052\133\001\002\000\006\007\131\010\124\001\002\000" +
    "\006\007\ufff2\010\ufff2\001\002\000\012\010\ufff7\015\ufff7" +
    "\020\ufff7\030\ufff7\001\002\000\004\010\141\001\002\000" +
    "\010\012\137\013\135\014\136\001\002\000\004\037\140" +
    "\001\002\000\006\037\ufff5\051\ufff5\001\002\000\006\037" +
    "\ufff4\051\ufff4\001\002\000\006\037\ufff6\051\ufff6\001\002" +
    "\000\006\007\ufff1\010\ufff1\001\002\000\006\040\uffef\052" +
    "\uffef\001\002\000\016\010\044\041\036\042\043\047\047" +
    "\053\035\054\041\001\002\000\004\016\144\001\002\000" +
    "\004\006\145\001\002\000\012\010\016\015\014\020\011" +
    "\030\021\001\002\000\020\002\uffe6\007\uffe6\010\uffe6\015" +
    "\uffe6\017\147\020\uffe6\030\uffe6\001\002\000\004\006\145" +
    "\001\002\000\016\002\uffe5\007\uffe5\010\uffe5\015\uffe5\020" +
    "\uffe5\030\uffe5\001\002\000\014\007\152\010\016\015\014" +
    "\020\011\030\021\001\002\000\020\002\ufffe\007\ufffe\010" +
    "\ufffe\015\ufffe\017\ufffe\020\ufffe\030\ufffe\001\002\000\024" +
    "\024\060\025\054\031\062\032\055\033\057\034\063\035" +
    "\056\036\064\045\061\001\002\000\004\021\155\001\002" +
    "\000\004\006\145\001\002\000\016\002\uffe4\007\uffe4\010" +
    "\uffe4\015\uffe4\020\uffe4\030\uffe4\001\002\000\004\010\160" +
    "\001\002\000\004\052\165\001\002\000\006\007\163\010" +
    "\160\001\002\000\006\007\ufffa\010\ufffa\001\002\000\014" +
    "\010\ufffb\011\ufffb\015\ufffb\020\ufffb\030\ufffb\001\002\000" +
    "\006\007\ufff9\010\ufff9\001\002\000\010\012\137\013\135" +
    "\014\136\001\002\000\004\051\167\001\002\000\012\010" +
    "\044\047\066\053\035\054\041\001\002\000\010\024\060" +
    "\025\054\037\171\001\002\000\006\007\ufff8\010\ufff8\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\020\006\016" +
    "\007\022\022\011\023\017\025\007\026\012\033\021\001" +
    "\001\000\002\001\001\000\006\014\041\030\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\041\030" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\031\022\011\023\017\025\007\026\012\033\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\022\023\023\017\025\007\026\012\033\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\022\023\023\017\025\007\026\012\033\021\001\001" +
    "\000\022\012\036\013\045\014\041\015\047\016\033\017" +
    "\050\030\044\031\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\036\013\045\014\041\015\047\016\051\017\050" +
    "\030\044\031\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\113" +
    "\013\045\001\001\000\010\012\036\013\045\031\111\001" +
    "\001\000\010\012\036\013\045\031\107\001\001\000\010" +
    "\012\036\013\045\031\105\001\001\000\006\012\100\013" +
    "\045\001\001\000\010\012\036\013\045\031\075\001\001" +
    "\000\010\012\036\013\045\031\073\001\001\000\010\012" +
    "\036\013\045\031\071\001\001\000\010\012\036\013\045" +
    "\031\066\001\001\000\002\001\001\000\010\012\036\013" +
    "\045\031\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\036\013\045\031\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\104\001\001\000\004\013\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\036\013\045\014\041\015\121\017\050\030\044" +
    "\031\117\001\001\000\002\001\001\000\020\012\036\013" +
    "\045\014\041\015\120\017\050\030\044\031\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\126\011\124\021\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\127\021" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\036\013\045\014" +
    "\041\015\047\016\051\017\050\030\044\031\152\001\001" +
    "\000\002\001\001\000\004\020\145\001\001\000\016\007" +
    "\150\022\011\023\017\025\007\026\012\033\021\001\001" +
    "\000\002\001\001\000\004\020\147\001\001\000\002\001" +
    "\001\000\014\022\023\023\017\025\007\026\012\033\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\155\001\001\000\002\001\001\000\006" +
    "\004\160\005\161\001\001\000\002\001\001\000\004\005" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\165\001\001\000\002\001\001\000" +
    "\010\012\036\013\045\031\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }
    public Map<String, Simbolo> tablaDeSimbolos = new HashMap<String, Simbolo>();



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {
  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= MAIN const vars sentencias 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		  
                List<Nodo> sentencias = (List<Nodo>) ss;
                Nodo bloque = new Bloque(sentencias);
                bloque.setNombre("Main");
                System.out.println("Soy un Programa");
                RESULT = bloque;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= MAIN const sentencias 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                List<Nodo> sentencias = (List<Nodo>) ss;
                Nodo bloque = new Bloque(sentencias);
                bloque.setNombre("Main");
                System.out.println("Soy un Programa");
                RESULT = bloque;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloque ::= LLAVEABRE sentencias LLAVECIERRA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
        System.out.println("Soy un bloque"); 
        Nodo bloque = new Bloque((List<Nodo>) s);
        RESULT=bloque;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
    System.out.println("Soy muchas sentencias");
    List<Nodo> bloque = (List<Nodo>) ss;
    bloque.add((Nodo) s);
    RESULT = bloque;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencias",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    List<Nodo> bloque = new ArrayList<Nodo>();
    System.out.println("Soy una sentencia");
    bloque.add((Nodo) s);
    RESULT = bloque;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencias",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const ::= CONST LLAVEABRE constantes LLAVECIERRA 
            {
              Object RESULT =null;
		  
                System.out.println("SECTOR CONSTANTES");
           

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("const",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constantes ::= constante 
            {
              Object RESULT =null;
		
                System.out.println("UNA CONSTANTE");

            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constantes",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constantes ::= constantes constante 
            {
              Object RESULT =null;
		
                System.out.println("VARIAS CONSTANTES");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constantes",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constante ::= ID DOSPUNTOS tipo IGUAL exp PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                System.out.println("CONSTANTE");
                String tipo;
                String key = id.toString();
                Constante exp = (Constante) e;
                switch(t.toString()){
                    case "int":
                        tipo = "int";
                        if (!(Integer.class.isInstance(exp.getValor()))) {
                            System.out.println("ERROR EN TIPO ENTERO");
                            throw new IllegalArgumentException ("El argumento debe ser un número entero");
                        }
                        break;
                    case "float":
                        tipo = "float";
                        if (!(Float.class.isInstance(e))) {
                            System.out.println("ERROR EN TIPO FLOTANTE");
                            throw new IllegalArgumentException ("El argumento debe ser un número flotante");
                        }
                        break;
                    case "boolean":
                        tipo = "boolean";
                        if (e != ".T." && e != ".F.") {
                            System.out.println("ERROR EN TIPO BOOLEANO");
                            throw new IllegalArgumentException ("El argumento debe ser una expresion booleana");
                        }
                        break;
                    default:
                        System.out.println("NO ES UN TIPO");
                        throw new Exception ("Tipo de dato inexistente"); 
                }
                Simbolo s = new Simbolo(key, exp.getValor().toString(), tipo, true);
                if (tablaDeSimbolos.containsKey(key)) {
                    throw new Exception("Constante ya definida");
                } else {
                    tablaDeSimbolos.put(key, s);
                }
                System.out.println("Tabla: " + tablaDeSimbolos.toString());

                
                

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vars ::= VARS LLAVEABRE variables LLAVECIERRA 
            {
              Object RESULT =null;
		  
                System.out.println("SECTOR VARIABLES");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("vars",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Soy un tipo ENTERO");
            RESULT = i;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("Soy un tipo FLOAT");
                RESULT = f;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("Soy un tipo BOOLEAN");
                RESULT = b;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables ::= variable 
            {
              Object RESULT =null;
		
                System.out.println("UNA VARIABLE");

            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= variables variable 
            {
              Object RESULT =null;
		
                System.out.println("VARIAS VARIABLES");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable ::= ids DOSPUNTOS tipo PUNTO_COMA 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                System.out.println("VARIABLE");
                String tipo;
                String valor;
                switch(t.toString()){
                    case "int":
                        tipo = "int";
                        valor = "0";
                        break;
                    case "float":
                        tipo = "float";
                        valor = "0.0";
                        break;
                    case "boolean":
                        tipo = "boolean";
                        valor = "false";
                        break;
                    default:
                        System.out.println("NO ES UN TIPO");
                        throw new Exception ("Tipo de dato inexistente"); 
                }
                List<Identificador> listaNodos = (ArrayList<Identificador>)ids;
                for (Identificador variable : listaNodos) {                
                    Simbolo s = new Simbolo(variable.getValor(), valor, tipo);
                    if (tablaDeSimbolos.containsKey(variable.getValor())) {
                        throw new Exception("Identificador ya definida");
                    } else {
                        tablaDeSimbolos.put(variable.getValor(), s);
                    }
                }
                System.out.println("Tabla: " + tablaDeSimbolos.toString());

            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("UN ID");
        List<Nodo> listaIds = new ArrayList<Nodo>();
        listaIds.add((Nodo) new Identificador(id.toString()));
        RESULT = listaIds;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ids ::= ids COMA ID 
            {
              Object RESULT =null;
		int idssleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idssright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object idss = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                List<Nodo> listaIds = (ArrayList<Nodo>) idss;
                System.out.println("VARIOS IDS");
                listaIds.add(new Identificador(id.toString()));
                RESULT = idss;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= asig PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
                System.out.println("Soy una asignacion simple en una sentencia");
                RESULT = (Nodo) a;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("Sou un if en una sentencia");
                RESULT = (Nodo) i;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= while 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                System.out.println("Soy un while en una sentencia");
                 RESULT = (Nodo) w;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= show PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
                System.out.println("Soy un show en una sentencia");
                RESULT = (Nodo) s;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asig ::= ID IGUAL exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    System.out.println("soy una asignacion comun");
    Identificador id = new Identificador(i.toString());
    Nodo ex = (Nodo) e;
    RESULT = new AsignacionSimple(id, ex);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asig",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asig ::= ID IGUAL expbool 
            {
              Object RESULT =null;
		System.out.println("soy una asignacion booleana"); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asig",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asigs ::= ID IGUAL asig 
            {
              Object RESULT =null;
		
    System.out.println("Soy una asignacion simple");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asigs",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asigs ::= ID IGUAL asigs 
            {
              Object RESULT =null;
		
    System.out.println("Soy una asignacion compleja");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asigs",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= IF condicion THEN bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                Nodo cond = (Nodo) c;
                Nodo bloque = (Nodo) b;
                bloque.setNombre("Then");
                RESULT = new IfThen(cond, bloque);
       
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF condicion THEN bloque ELSE bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int bloqueThenleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int bloqueThenright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object bloqueThen = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bloqueElseleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bloqueElseright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object bloqueElse = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("Soy un if con else");
                Nodo cond = (Nodo) c;
                Nodo bloqueT = (Nodo) bloqueThen;
                bloqueT.setNombre("Then");
                Nodo bloqueE = (Nodo) bloqueElse;
                bloqueE.setNombre("Else");
                RESULT = new IfThenElse(cond, bloqueT, bloqueE);
       
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // while ::= WHILE condicion DO bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("Soy un while");
        Nodo cond = (Nodo) c;
        Nodo bloque = (Nodo) b;
        bloque.setNombre("Bloque While");
        Nodo w = new While(cond, bloque);
        RESULT = w;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // until ::= UNTIL condicion REPEAT bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("Soy un until");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("until",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // show ::= SHOW PARENABRE STRING PARENCIERRA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        System.out.println("Soy un show con string: " + s.toString());
        String cadena = s.toString();
        Nodo constanteString = new ConstanteString(cadena);
        Nodo show = new Show(constanteString);
        RESULT = show;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("show",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // between ::= exp BETWEEN exp AND exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    Nodo valor = (Nodo) e1;
    Nodo inf = (Nodo) e2;
    Nodo sup = (Nodo) e3;
    RESULT = new Between(valor, inf, sup);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("between",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= comparador 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 RESULT= c;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= PARENABRE expbool PARENCIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 RESULT=e;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= PARENABRE exp MAYOR exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Mayor(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= PARENABRE exp MENOR exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Menor(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= PARENABRE exp EQUAL exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Igual(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= PARENABRE exp DIFF exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		   
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Distinto(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= PARENABRE exp MAYOREQUAL exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new MayorIgual(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= PARENABRE exp MENOREQUAL exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
        Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new MenorIgual(izq, der); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp MAS termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Nodo exp = (Nodo) e;
                Nodo ter = (Nodo) t;
                Nodo nodo = new Suma(exp,ter);
                System.out.println("expresion::=expresion+factor;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MENOS termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Nodo exp = (Nodo) e;
                Nodo ter = (Nodo) t;
                Nodo nodo = new Resta(exp,ter);
                System.out.println("expresion::=expresion-factor;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("expresion::=termino;");
                RESULT= (Nodo) t;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termbool ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                
                RESULT= new ConstanteBooleana(true);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termbool ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                RESULT= new ConstanteBooleana(false);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termbool ::= between 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                RESULT= (Nodo) b;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termbool ::= condicion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy una condicion en termino bool");
                RESULT= (Nodo) c; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expbool ::= expbool AND termbool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            Nodo izquierdo = (Nodo) e1;
            Nodo derecho = (Nodo) e2;
            RESULT= new And(izquierdo, derecho);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expbool ::= expbool OR termbool 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
             Nodo izquierdo = (Nodo) e3;
            Nodo derecho = (Nodo) e4;
            RESULT= new Or(izquierdo, derecho);
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expbool ::= termbool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                 RESULT= (Nodo) t;
                
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termino ::= termino POR factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Nodo ter = (Nodo) t;
                Nodo fac = (Nodo) f;
                Nodo nodo = new Multiplicacion(ter,fac); 
                System.out.println("termino::=factor*termino;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termino ::= termino DIVIDIDO factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Nodo ter = (Nodo) t;
                Nodo fac = (Nodo) f;
                Nodo nodo = new Division(ter,fac); 
                System.out.println("termino::=factor/termino;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                 RESULT= (Nodo) f;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            Integer entero = null;
            try{
                entero = Integer.valueOf(e.toString());
            }catch(NumberFormatException  ex){
                System.out.println("El valor no corresponde a un número entero");
            }    
            RESULT= new Constante(entero);
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= FLOTANTE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
             Float flotante = null;
             try{
                flotante = Float.valueOf(f.toString());
            }catch(NumberFormatException  ex){
                System.out.println("El valor no corresponde a un número flotante");
            }    
            RESULT= new ConstanteFlotante(flotante);
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= ID 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                RESULT = new Identificador(identificador.toString());
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= PARENABRE exp PARENCIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                RESULT = (Nodo) e;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
