
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ejemplo.jflex;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.lang.NumberFormatException;
import java.lang.IllegalArgumentException;
import java.lang.TypeNotPresentException;
import java.lang.Throwable;
import ejemplo.nodos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\006\000\002\020" +
    "\005\000\002\007\005\000\002\007\004\000\002\003\006" +
    "\000\002\003\002\000\002\004\003\000\002\004\004\000" +
    "\002\005\010\000\002\006\006\000\002\006\002\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\010" +
    "\003\000\002\010\004\000\002\011\006\000\002\021\003" +
    "\000\002\021\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\005\000\002" +
    "\023\005\000\002\024\005\000\002\024\005\000\002\025" +
    "\006\000\002\025\010\000\002\026\006\000\002\027\006" +
    "\000\002\033\006\000\002\017\007\000\002\030\003\000" +
    "\002\030\005\000\002\014\007\000\002\014\007\000\002" +
    "\014\007\000\002\014\007\000\002\014\007\000\002\014" +
    "\007\000\002\031\005\000\002\031\005\000\002\031\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\012\010\011\015\010\020\005\030\013\001" +
    "\002\000\006\002\uffec\037\uffec\001\002\000\004\046\110" +
    "\001\002\000\004\002\126\001\002\000\006\002\uffeb\037" +
    "\uffeb\001\002\000\004\046\110\001\002\000\004\050\020" +
    "\001\002\000\006\002\uffed\037\uffed\001\002\000\004\046" +
    "\015\001\002\000\006\002\uffea\037\uffea\001\002\000\004" +
    "\045\016\001\002\000\004\047\017\001\002\000\006\002" +
    "\uffe1\037\uffe1\001\002\000\016\010\031\040\025\041\030" +
    "\046\034\052\023\053\026\001\002\000\012\002\uffe8\037" +
    "\uffe8\042\102\043\104\001\002\000\042\002\uffd5\024\uffd5" +
    "\025\uffd5\026\070\027\067\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\047\uffd5\001\002\000\042\002\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\042\uffca\043\uffca\044\uffca\047\uffca\001" +
    "\002\000\014\002\uffe9\024\045\025\041\037\uffe9\044\046" +
    "\001\002\000\014\002\uffd4\037\uffd4\042\uffd4\043\uffd4\047" +
    "\uffd4\001\002\000\042\002\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\042\uffc9\043\uffc9\044\uffc9\047\uffc9\001\002" +
    "\000\020\002\uffdf\016\uffdf\021\uffdf\037\uffdf\042\uffdf\043" +
    "\uffdf\047\uffdf\001\002\000\014\002\uffd3\037\uffd3\042\uffd3" +
    "\043\uffd3\047\uffd3\001\002\000\042\002\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\042\uffc8\043\uffc8\044\uffc8\047" +
    "\uffc8\001\002\000\042\002\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\042\uffcb\043\uffcb\044\uffcb\047\uffcb\001\002" +
    "\000\014\002\uffd1\037\uffd1\042\uffd1\043\uffd1\047\uffd1\001" +
    "\002\000\016\010\031\040\025\041\030\046\034\052\023" +
    "\053\026\001\002\000\014\002\uffce\037\uffce\042\uffce\043" +
    "\uffce\047\uffce\001\002\000\014\002\uffd2\037\uffd2\042\uffd2" +
    "\043\uffd2\047\uffd2\001\002\000\010\042\102\043\104\047" +
    "\103\001\002\000\026\024\045\025\041\031\047\032\042" +
    "\033\044\034\050\035\043\036\051\044\046\047\052\001" +
    "\002\000\012\010\031\046\053\052\023\053\026\001\002" +
    "\000\012\010\031\046\053\052\023\053\026\001\002\000" +
    "\012\010\031\046\053\052\023\053\026\001\002\000\012" +
    "\010\031\046\053\052\023\053\026\001\002\000\012\010" +
    "\031\046\053\052\023\053\026\001\002\000\012\010\031" +
    "\046\053\052\023\053\026\001\002\000\012\010\031\046" +
    "\053\052\023\053\026\001\002\000\012\010\031\046\053" +
    "\052\023\053\026\001\002\000\012\010\031\046\053\052" +
    "\023\053\026\001\002\000\042\002\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\042\uffc7\043\uffc7\044\uffc7\047\uffc7" +
    "\001\002\000\012\010\031\046\053\052\023\053\026\001" +
    "\002\000\010\024\045\025\041\047\055\001\002\000\020" +
    "\002\uffd8\016\uffd8\021\uffd8\037\uffd8\042\uffd8\043\uffd8\047" +
    "\uffd8\001\002\000\010\024\045\025\041\047\052\001\002" +
    "\000\010\024\045\025\041\047\060\001\002\000\020\002" +
    "\uffda\016\uffda\021\uffda\037\uffda\042\uffda\043\uffda\047\uffda" +
    "\001\002\000\010\024\045\025\041\047\062\001\002\000" +
    "\020\002\uffdd\016\uffdd\021\uffdd\037\uffdd\042\uffdd\043\uffdd" +
    "\047\uffdd\001\002\000\010\024\045\025\041\042\064\001" +
    "\002\000\012\010\031\046\053\052\023\053\026\001\002" +
    "\000\020\002\uffe0\024\045\025\041\037\uffe0\042\uffe0\043" +
    "\uffe0\047\uffe0\001\002\000\042\002\uffd7\024\uffd7\025\uffd7" +
    "\026\070\027\067\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\042\uffd7\043\uffd7\044\uffd7\047\uffd7" +
    "\001\002\000\012\010\031\046\053\052\023\053\026\001" +
    "\002\000\012\010\031\046\053\052\023\053\026\001\002" +
    "\000\042\002\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\042\uffcd\043\uffcd\044\uffcd\047\uffcd\001\002\000\042\002" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\047\uffcc\001\002\000\010\024\045\025\041" +
    "\047\074\001\002\000\020\002\uffdb\016\uffdb\021\uffdb\037" +
    "\uffdb\042\uffdb\043\uffdb\047\uffdb\001\002\000\010\024\045" +
    "\025\041\047\076\001\002\000\020\002\uffd9\016\uffd9\021" +
    "\uffd9\037\uffd9\042\uffd9\043\uffd9\047\uffd9\001\002\000\010" +
    "\024\045\025\041\047\100\001\002\000\020\002\uffdc\016" +
    "\uffdc\021\uffdc\037\uffdc\042\uffdc\043\uffdc\047\uffdc\001\002" +
    "\000\042\002\uffd6\024\uffd6\025\uffd6\026\070\027\067\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\047\uffd6\001\002\000\016\010" +
    "\031\040\025\041\030\046\034\052\023\053\026\001\002" +
    "\000\020\002\uffde\016\uffde\021\uffde\037\uffde\042\uffde\043" +
    "\uffde\047\uffde\001\002\000\016\010\031\040\025\041\030" +
    "\046\034\052\023\053\026\001\002\000\010\024\045\025" +
    "\041\044\046\001\002\000\014\002\uffcf\037\uffcf\042\uffcf" +
    "\043\uffcf\047\uffcf\001\002\000\014\002\uffd0\037\uffd0\042" +
    "\uffd0\043\uffd0\047\uffd0\001\002\000\016\010\031\040\025" +
    "\041\030\046\034\052\023\053\026\001\002\000\004\016" +
    "\112\001\002\000\004\006\113\001\002\000\012\010\011" +
    "\015\010\020\005\030\013\001\002\000\010\002\uffe5\017" +
    "\115\037\uffe5\001\002\000\004\006\113\001\002\000\006" +
    "\002\uffe4\037\uffe4\001\002\000\004\037\124\001\002\000" +
    "\014\007\122\010\011\015\010\020\005\030\013\001\002" +
    "\000\004\037\123\001\002\000\010\002\uffff\017\uffff\037" +
    "\uffff\001\002\000\014\007\ufffe\010\ufffe\015\ufffe\020\ufffe" +
    "\030\ufffe\001\002\000\014\007\ufffd\010\ufffd\015\ufffd\020" +
    "\ufffd\030\ufffd\001\002\000\024\024\045\025\041\031\047" +
    "\032\042\033\044\034\050\035\043\036\051\044\046\001" +
    "\002\000\004\002\001\001\002\000\004\021\130\001\002" +
    "\000\004\006\113\001\002\000\006\002\uffe3\037\uffe3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\014\022\005\023\011\025\003\026\006\033" +
    "\013\001\001\000\002\001\001\000\006\014\026\030\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\026\030\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\021\013\031" +
    "\014\026\015\034\016\020\017\035\030\032\031\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\021\013\031\014" +
    "\026\015\034\016\036\017\035\030\032\031\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\100\013\031\001\001\000\010" +
    "\012\021\013\031\031\076\001\001\000\010\012\021\013" +
    "\031\031\074\001\001\000\010\012\021\013\031\031\072" +
    "\001\001\000\006\012\065\013\031\001\001\000\010\012" +
    "\021\013\031\031\062\001\001\000\010\012\021\013\031" +
    "\031\060\001\001\000\010\012\021\013\031\031\056\001" +
    "\001\000\010\012\021\013\031\031\053\001\001\000\002" +
    "\001\001\000\010\012\021\013\031\031\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\021\013\031\031\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\071\001\001\000\004\013\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\021\013\031\014" +
    "\026\015\106\017\035\030\032\031\104\001\001\000\002" +
    "\001\001\000\020\012\021\013\031\014\026\015\105\017" +
    "\035\030\032\031\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\021\013\031\014" +
    "\026\015\034\016\036\017\035\030\032\031\124\001\001" +
    "\000\002\001\001\000\004\020\113\001\001\000\016\007" +
    "\117\022\116\023\011\025\003\026\006\033\013\001\001" +
    "\000\002\001\001\000\004\020\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\120\023\011\025\003" +
    "\026\006\033\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\130\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {
  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentencia EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= MAIN const vars sentencias 
            {
              Object RESULT =null;
		  
                System.out.println("Soy un Programa");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVEABRE sentencias LLAVECIERRA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
        System.out.println("Soy un bloque"); 
        Nodo bloque = new Bloque((List<Nodo>) s);
        RESULT=bloque;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencias sentencia PUNTO_COMA 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
    System.out.println("Soy muchas sentencias");
    List<Nodo> bloque = (List<Nodo>) ss;
    bloque.add((Nodo) s);
    RESULT = bloque;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencias",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencia PUNTO_COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    List<Nodo> bloque = new ArrayList<Nodo>();
    System.out.println("Soy una sentencia");
    bloque.add((Nodo) s);
    RESULT = bloque;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencias",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const ::= CONST LLAVEABRE constantes LLAVECIERRA 
            {
              Object RESULT =null;
		  
                System.out.println("SECTOR CONSTANTES");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("const",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const ::= 
            {
              Object RESULT =null;
		
                System.out.println("NO HAY CONSTANTES");
                RESULT = null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("const",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constantes ::= constante 
            {
              Object RESULT =null;
		
                System.out.println("UNA CONSTANTE");

            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constantes",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constantes ::= constantes constante 
            {
              Object RESULT =null;
		
                System.out.println("VARIAS CONSTANTES");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constantes",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constante ::= ID DOSPUNTOS tipo IGUAL exp PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                System.out.println("CONSTANTE");
                switch(t.toString()){
                    case "int":
                        if (!(Integer.class.isInstance(e))) {
                            System.out.println("ERROR EN TIPO ENTERO");
                            throw new IllegalArgumentException ("El argumento debe ser un número entero");
                        }
                        break;
                    case "float":
                        if (!(Float.class.isInstance(e))) {
                            System.out.println("ERROR EN TIPO FLOTANTE");
                            throw new IllegalArgumentException ("El argumento debe ser un número flotante");
                        }
                        break;
                    case "boolean":
                        if (e != ".T." && e != ".F.") {
                            System.out.println("ERROR EN TIPO BOOLEANO");
                            throw new IllegalArgumentException ("El argumento debe ser una expresion booleana");
                        }
                        break;
                    default:
                        System.out.println("NO ES UN TIPO");
                        break; 
                }

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vars ::= VARS LLAVEABRE variables LLAVECIERRA 
            {
              Object RESULT =null;
		  
                System.out.println("SECTOR VARIABLES");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("vars",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vars ::= 
            {
              Object RESULT =null;
		
                System.out.println("NO HAY VARIABLES");
                RESULT = null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("vars",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Soy un tipo ENTERO");
            RESULT = i;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Soy un tipo FLOAT");
            RESULT = f;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Soy un tipo BOOLEAN");
            RESULT = b;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= variable 
            {
              Object RESULT =null;
		
                System.out.println("UNA VARIABLE");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= variables variable 
            {
              Object RESULT =null;
		
                System.out.println("VARIAS VARIABLES");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable ::= ids DOSPUNTOS tipo PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("VARIABLE");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("UN ID");
        RESULT = new Identificador("id");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ids ::= ids ID 
            {
              Object RESULT =null;
		
        System.out.println("VARIOS IDS");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= asig 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                System.out.println("Soy una asignacion simple en una sentencia");
                RESULT = (Nodo) a;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("Sou un if en una sentencia");
                RESULT = (Nodo) i;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= while 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                System.out.println("Soy un while en una sentencia");
                 RESULT = (Nodo) w;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= show 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                System.out.println("Soy un show en una sentencia");
                RESULT = (Nodo) s;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asig ::= ID IGUAL exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    System.out.println("soy una asignacion comun");
    Identificador id = new Identificador(i.toString());
    Nodo ex = (Nodo) e;
    RESULT = new AsignacionSimple(id, ex);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asig",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asig ::= ID IGUAL expbool 
            {
              Object RESULT =null;
		System.out.println("soy una asignacion booleana"); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asig",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asigs ::= ID IGUAL asig 
            {
              Object RESULT =null;
		
    System.out.println("Soy una asignacion simple");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asigs",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asigs ::= ID IGUAL asigs 
            {
              Object RESULT =null;
		
    System.out.println("Soy una asignacion compleja");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asigs",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF condicion THEN bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                Nodo cond = (Nodo) c;
                Nodo bloque = (Nodo) b;
                RESULT = new IfThen(cond, bloque);
       
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if ::= IF condicion THEN bloque ELSE bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int bloqueThenleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int bloqueThenright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object bloqueThen = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bloqueElseleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bloqueElseright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object bloqueElse = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("Soy un if con else");
                Nodo cond = (Nodo) c;
                Nodo bloqueT = (Nodo) bloqueThen;
                Nodo bloqueE = (Nodo) bloqueElse;
                RESULT = new IfThenElse(cond, bloqueT, bloqueE);
       
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // while ::= WHILE condicion DO bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("Soy un while");
        Nodo cond = (Nodo) c;
        Nodo bloque = (Nodo) b;
        Nodo w = new While(cond, bloque);
        RESULT = w;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // until ::= UNTIL condicion REPEAT bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("Soy un until");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("until",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // show ::= SHOW PARENABRE STRING PARENCIERRA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        System.out.println("Soy un show con string: " + s.toString());
        String cadena = s.toString();
        Nodo show = new Show(cadena);
        RESULT = show;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("show",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // between ::= exp BETWEEN exp AND exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    Nodo valor = (Nodo) e1;
    Nodo inf = (Nodo) e2;
    Nodo sup = (Nodo) e3;
    RESULT = new Between(valor, inf, sup);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("between",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= comparador 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 RESULT= c;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= PARENABRE expbool PARENCIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 RESULT=e;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= PARENABRE exp MAYOR exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Mayor(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= PARENABRE exp MENOR exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Menor(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= PARENABRE exp EQUAL exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Igual(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= PARENABRE exp DIFF exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		   
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new Distinto(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= PARENABRE exp MAYOREQUAL exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
       Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new MayorIgual(izq, der);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparador ::= PARENABRE exp MENOREQUAL exp PARENCIERRA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 
        Nodo izq = (Nodo) e1;
        Nodo der = (Nodo) e2;
        RESULT= new MenorIgual(izq, der); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MAS termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Nodo exp = (Nodo) e;
                Nodo ter = (Nodo) t;
                Nodo nodo = new Suma(exp,ter);
                System.out.println("expresion::=expresion+factor;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp MENOS termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Nodo exp = (Nodo) e;
                Nodo ter = (Nodo) t;
                Nodo nodo = new Resta(exp,ter);
                System.out.println("expresion::=expresion-factor;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("expresion::=termino;");
                RESULT= (Nodo) t;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termbool ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                
                RESULT= new ConstanteBooleana(true);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termbool ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                RESULT= new ConstanteBooleana(false);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termbool ::= between 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                RESULT= (Nodo) b;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termbool ::= condicion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy una condicion en termino bool");
                RESULT= (Nodo) c; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expbool ::= expbool AND termbool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            Nodo izquierdo = (Nodo) e1;
            Nodo derecho = (Nodo) e2;
            RESULT= new And(izquierdo, derecho);
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expbool ::= expbool OR termbool 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
             Nodo izquierdo = (Nodo) e3;
            Nodo derecho = (Nodo) e4;
            RESULT= new Or(izquierdo, derecho);
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expbool ::= termbool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                 RESULT= (Nodo) t;
                
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termino ::= termino POR factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Nodo ter = (Nodo) t;
                Nodo fac = (Nodo) f;
                Nodo nodo = new Multiplicacion(ter,fac); 
                System.out.println("termino::=factor*termino;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termino ::= termino DIVIDIDO factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Nodo ter = (Nodo) t;
                Nodo fac = (Nodo) f;
                Nodo nodo = new Division(ter,fac); 
                System.out.println("termino::=factor/termino;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                 RESULT= (Nodo) f;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            Integer entero = null;
            try{
                entero = Integer.valueOf(e.toString());
            }catch(NumberFormatException  ex){
                System.out.println("El valor no corresponde a un número entero");
            }    
            RESULT= new Constante(entero);
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= FLOTANTE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
             Float flotante = null;
             try{
                flotante = Float.valueOf(f.toString());
            }catch(NumberFormatException  ex){
                System.out.println("El valor no corresponde a un número flotante");
            }    
            RESULT= new Constante(flotante);
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= ID 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                RESULT = new Identificador(identificador.toString());
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= PARENABRE exp PARENCIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                RESULT = (Nodo) e;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
