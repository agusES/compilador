
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ejemplo.jflex;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.lang.NumberFormatException;
import java.lang.IllegalArgumentException;
import java.lang.TypeNotPresentException;
import java.lang.Throwable;
import ejemplo.nodos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\006\000\002\020" +
    "\005\000\002\007\005\000\002\007\004\000\002\003\006" +
    "\000\002\003\002\000\002\004\003\000\002\004\004\000" +
    "\002\005\010\000\002\006\006\000\002\006\002\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\010" +
    "\003\000\002\010\004\000\002\011\006\000\002\021\003" +
    "\000\002\021\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\005\000\002\023\005\000\002\024" +
    "\005\000\002\024\005\000\002\025\006\000\002\025\010" +
    "\000\002\026\006\000\002\027\006\000\002\033\006\000" +
    "\002\017\007\000\002\030\007\000\002\030\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\012" +
    "\005\000\002\012\005\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\004\010\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\016\010\017\040\011\041\016\046\022\052\012\053" +
    "\015\001\002\000\010\002\uffe6\042\057\043\061\001\002" +
    "\000\012\002\uffd2\042\uffd2\043\uffd2\047\uffd2\001\002\000" +
    "\040\002\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\047\uffc8\001\002\000\040\002\uffd3\024\uffd3" +
    "\025\uffd3\026\053\027\052\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\042\uffd3\043\uffd3\044\uffd3\047\uffd3" +
    "\001\002\000\012\002\uffe7\024\033\025\027\044\035\001" +
    "\002\000\040\002\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\047\uffc7\001\002\000\012\002\uffd1" +
    "\042\uffd1\043\uffd1\047\uffd1\001\002\000\040\002\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\042\uffc6\043\uffc6\044\uffc6\047" +
    "\uffc6\001\002\000\040\002\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\047\uffc9\001\002\000\012" +
    "\002\uffcf\042\uffcf\043\uffcf\047\uffcf\001\002\000\016\010" +
    "\017\040\011\041\016\046\022\052\012\053\015\001\002" +
    "\000\012\002\uffcc\042\uffcc\043\uffcc\047\uffcc\001\002\000" +
    "\012\002\uffd0\042\uffd0\043\uffd0\047\uffd0\001\002\000\010" +
    "\042\057\043\061\047\060\001\002\000\026\024\033\025" +
    "\027\031\036\032\030\033\032\034\037\035\031\036\040" +
    "\044\035\047\041\001\002\000\012\010\017\046\042\052" +
    "\012\053\015\001\002\000\012\010\uffda\046\uffda\052\uffda" +
    "\053\uffda\001\002\000\012\010\uffd7\046\uffd7\052\uffd7\053" +
    "\uffd7\001\002\000\012\010\uffd9\046\uffd9\052\uffd9\053\uffd9" +
    "\001\002\000\012\010\017\046\042\052\012\053\015\001" +
    "\002\000\012\010\017\046\042\052\012\053\015\001\002" +
    "\000\012\010\017\046\042\052\012\053\015\001\002\000" +
    "\012\010\uffdb\046\uffdb\052\uffdb\053\uffdb\001\002\000\012" +
    "\010\uffd8\046\uffd8\052\uffd8\053\uffd8\001\002\000\012\010" +
    "\uffd6\046\uffd6\052\uffd6\053\uffd6\001\002\000\040\002\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\047\uffc5\001\002\000\012\010\017\046\042\052\012\053" +
    "\015\001\002\000\010\024\033\025\027\042\044\001\002" +
    "\000\012\010\017\046\042\052\012\053\015\001\002\000" +
    "\016\002\uffde\024\033\025\027\042\uffde\043\uffde\047\uffde" +
    "\001\002\000\010\024\033\025\027\047\041\001\002\000" +
    "\010\024\033\025\027\047\050\001\002\000\012\002\uffdd" +
    "\042\uffdd\043\uffdd\047\uffdd\001\002\000\040\002\uffd5\024" +
    "\uffd5\025\uffd5\026\053\027\052\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\042\uffd5\043\uffd5\044\uffd5\047" +
    "\uffd5\001\002\000\012\010\017\046\042\052\012\053\015" +
    "\001\002\000\012\010\017\046\042\052\012\053\015\001" +
    "\002\000\040\002\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\047\uffcb\001\002\000\040\002\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\042\uffca\043\uffca\044\uffca" +
    "\047\uffca\001\002\000\040\002\uffd4\024\uffd4\025\uffd4\026" +
    "\053\027\052\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\042\uffd4\043\uffd4\044\uffd4\047\uffd4\001\002\000" +
    "\016\010\017\040\011\041\016\046\022\052\012\053\015" +
    "\001\002\000\012\002\uffdc\042\uffdc\043\uffdc\047\uffdc\001" +
    "\002\000\016\010\017\040\011\041\016\046\022\052\012" +
    "\053\015\001\002\000\010\024\033\025\027\044\035\001" +
    "\002\000\012\002\uffcd\042\uffcd\043\uffcd\047\uffcd\001\002" +
    "\000\012\002\uffce\042\uffce\043\uffce\047\uffce\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\004\023\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\012\013\017" +
    "\015\022\016\007\017\023\030\020\031\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\012\013\017\015\022\016\024\017\023\030" +
    "\020\031\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\033\001\001\000\006\012" +
    "\055\013\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\050\013\017\001\001\000" +
    "\010\012\012\013\017\031\046\001\001\000\010\012\012" +
    "\013\017\031\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\012" +
    "\013\017\031\045\001\001\000\002\001\001\000\010\012" +
    "\012\013\017\031\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\054\001\001\000\004\013\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\012\013\017\015\063\017\023\030\020\031\061" +
    "\001\001\000\002\001\001\000\016\012\012\013\017\015" +
    "\062\017\023\030\020\031\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo nÂ° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo nÂ° "+s.sym+ " no reconocido." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {
  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= asig EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= MAIN const vars sentencias 
            {
              Object RESULT =null;
		  
                System.out.println("Soy un Programa");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVEABRE sentencias LLAVECIERRA 
            {
              Object RESULT =null;
		 System.out.println("Soy un bloque"); RESULT="bloque";
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencias sentencia PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println("Soy muchas sentencias"); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencias",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencia PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Soy una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencias",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const ::= CONST LLAVEABRE constantes LLAVECIERRA 
            {
              Object RESULT =null;
		  
                System.out.println("SECTOR CONSTANTES");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("const",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const ::= 
            {
              Object RESULT =null;
		
                System.out.println("NO HAY CONSTANTES");
                RESULT=(Symbol) null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("const",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constantes ::= constante 
            {
              Object RESULT =null;
		
                System.out.println("UNA CONSTANTE");

            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constantes",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constantes ::= constantes constante 
            {
              Object RESULT =null;
		
                System.out.println("VARIAS CONSTANTES");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constantes",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constante ::= ID DOSPUNTOS tipo IGUAL exp PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                System.out.println("CONSTANTE");
                switch(t.toString()){
                    case "int":
                        if (!(Integer.class.isInstance(e))) {
                            System.out.println("ERROR EN TIPO ENTERO");
                            throw new IllegalArgumentException ("El argumento debe ser un nÃºmero entero");
                        }
                        break;
                    case "float":
                        if (!(Float.class.isInstance(e))) {
                            System.out.println("ERROR EN TIPO FLOTANTE");
                            throw new IllegalArgumentException ("El argumento debe ser un nÃºmero flotante");
                        }
                        break;
                    case "boolean":
                        if (e != ".T." && e != ".F.") {
                            System.out.println("ERROR EN TIPO BOOLEANO");
                            throw new IllegalArgumentException ("El argumento debe ser una expresion booleana");
                        }
                        break;
                    default:
                        System.out.println("NO ES UN TIPO");
                        break; 
                }

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vars ::= VARS LLAVEABRE variables LLAVECIERRA 
            {
              Object RESULT =null;
		  
                System.out.println("SECTOR VARIABLES");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("vars",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vars ::= 
            {
              Object RESULT =null;
		
                System.out.println("NO HAY VARIABLES");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("vars",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= INT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Soy un tipo ENTERO");
            RESULT = i;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Soy un tipo FLOAT");
            RESULT = f;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            System.out.println("Soy un tipo BOOLEAN");
            RESULT = b;
        
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("tipo",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= variable 
            {
              Object RESULT =null;
		
                System.out.println("UNA VARIABLE");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= variables variable 
            {
              Object RESULT =null;
		
                System.out.println("VARIAS VARIABLES");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variable ::= ids DOSPUNTOS tipo PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("VARIABLE");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ids ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        System.out.println("UN ID");
        RESULT = new Identificador("id");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ids ::= ids ID 
            {
              Object RESULT =null;
		
        System.out.println("VARIOS IDS");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= asig 
            {
              Object RESULT =null;
		 System.out.println("Soy una asignacion simple en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= asigs 
            {
              Object RESULT =null;
		 System.out.println("Soy una asignacion compleja en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= if 
            {
              Object RESULT =null;
		 System.out.println("Sou un if en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= while 
            {
              Object RESULT =null;
		 System.out.println("Soy un while en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= until 
            {
              Object RESULT =null;
		 System.out.println("Soy un until en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= show 
            {
              Object RESULT =null;
		 System.out.println("Soy un show en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asig ::= ID IGUAL exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    System.out.println("soy una asignacion comun");
    Identificador id = new Identificador(i.toString());
    Expresion ex = (Expresion) e;
    RESULT = new Asignacion(id, ex);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asig",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asig ::= ID IGUAL expbool 
            {
              Object RESULT =null;
		System.out.println("soy una asignacion booleana"); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asig",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asigs ::= ID IGUAL asig 
            {
              Object RESULT =null;
		
    System.out.println("Soy una asignacion simple");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asigs",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asigs ::= ID IGUAL asigs 
            {
              Object RESULT =null;
		
    System.out.println("Soy una asignacion compleja");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asigs",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if ::= IF condicion THEN bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                System.out.println("if " + c + " then " + b);
       
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF condicion THEN bloque ELSE bloque 
            {
              Object RESULT =null;
		
                System.out.println("Soy un if con else");
       
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // while ::= WHILE condicion DO bloque 
            {
              Object RESULT =null;
		System.out.println("Soy un while");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("while",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // until ::= UNTIL condicion REPEAT bloque 
            {
              Object RESULT =null;
		System.out.println("Soy un until");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("until",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // show ::= SHOW PARENABRE STRING PARENCIERRA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		System.out.println("Soy un show con string: " + s.toString());
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("show",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // between ::= exp BETWEEN exp AND exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println( e1 + " between " + e2 + " AND " + e3);
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("between",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= PARENABRE exp comparador exp PARENCIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 RESULT= "(" + e + c+ e2+")";
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= PARENABRE expbool PARENCIERRA 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 RESULT= "(" + e3 +")";
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= MAYOR 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 RESULT= ma;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= MENOR 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un menor");RESULT= me; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= EQUAL 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un igual");RESULT= eq; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparador ::= DIFF 
            {
              Object RESULT =null;
		int difleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int difright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object dif = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un distinto");RESULT= dif; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparador ::= MAYOREQUAL 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un mayor o igual");RESULT= ge; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparador ::= MENOREQUAL 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un menor o igual");RESULT= me; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp MAS termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Expresion exp = (Expresion) e;
                Expresion ter = (Expresion) t;
                Expresion nodo = new Suma(exp,ter);
                System.out.println("expresion::=expresion+factor;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MENOS termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Expresion exp = (Expresion) e;
                Expresion ter = (Expresion) t;
                Expresion nodo = new Resta(exp,ter);
                System.out.println("expresion::=expresion-factor;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("expresion::=termino;");
                RESULT= (Expresion) t;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termbool ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("Soy un TRUE");
                RESULT= t;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termbool ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un FALSE");
                RESULT= f;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termbool ::= between 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("expresion::=between;");
                RESULT= b;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termbool ::= condicion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy una condicion en termino bool");
                RESULT= c; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expbool ::= expbool AND termbool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un AND");RESULT= e1 +" and "+ e2; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expbool ::= expbool OR termbool 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un OR"); RESULT= e3 +" or "+ e4;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expbool ::= termbool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                 RESULT= t;
                
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // termino ::= termino POR factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Expresion ter = (Expresion) t;
                Expresion fac = (Expresion) f;
                Expresion nodo = new Multiplicacion(ter,fac); 
                System.out.println("termino::=factor*termino;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // termino ::= termino DIVIDIDO factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                Expresion ter = (Expresion) t;
                Expresion fac = (Expresion) f;
                Expresion nodo = new Division(ter,fac); 
                System.out.println("termino::=factor/termino;");
                RESULT = nodo;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                 RESULT= (Expresion) f;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            Integer entero = null;
            try{
                entero = Integer.valueOf(e.toString());
            }catch(NumberFormatException  ex){
                System.out.println("El valor no corresponde a un nÃºmero entero");
            }    
            RESULT= new Constante(entero);
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= FLOTANTE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
             Float flotante = null;
             try{
                flotante = Float.valueOf(f.toString());
            }catch(NumberFormatException  ex){
                System.out.println("El valor no corresponde a un nÃºmero flotante");
            }    
            RESULT= new Constante(flotante);
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= ID 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                RESULT = new Identificador(identificador.toString());
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= PARENABRE exp PARENCIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
                RESULT = (Expresion) e;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
