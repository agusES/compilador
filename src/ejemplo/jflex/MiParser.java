
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ejemplo.jflex;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\007\000\002\021" +
    "\005\000\002\010\005\000\002\010\004\000\002\007\020" +
    "\000\002\026\005\000\002\003\006\000\002\003\002\000" +
    "\002\004\003\000\002\004\004\000\002\005\007\000\002" +
    "\006\006\000\002\006\002\000\002\011\003\000\002\011" +
    "\004\000\002\012\005\000\002\022\003\000\002\022\004" +
    "\000\002\023\003\000\002\023\004\000\002\024\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\027\005\000\002\027" +
    "\005\000\002\030\005\000\002\030\005\000\002\031\006" +
    "\000\002\031\010\000\002\032\006\000\002\033\006\000" +
    "\002\020\007\000\002\034\007\000\002\034\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\035\005" +
    "\000\002\035\005\000\002\035\003\000\002\035\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\004\005\001\002\000\004\002\204\001" +
    "\002\000\010\005\007\011\ufff9\013\ufff9\001\002\000\006" +
    "\011\042\013\ufff4\001\002\000\004\006\010\001\002\000" +
    "\004\010\011\001\002\000\004\050\016\001\002\000\006" +
    "\007\014\010\011\001\002\000\006\007\ufff8\010\ufff8\001" +
    "\002\000\016\010\ufffa\011\ufffa\013\ufffa\015\ufffa\020\ufffa" +
    "\022\ufffa\001\002\000\006\007\ufff7\010\ufff7\001\002\000" +
    "\004\012\017\001\002\000\004\047\020\001\002\000\012" +
    "\010\021\044\023\045\022\052\026\001\002\000\044\007" +
    "\uffc6\010\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\046\uffc6\001\002\000\012\010\021" +
    "\044\023\045\022\052\026\001\002\000\040\007\uffd2\010" +
    "\uffd2\024\uffd2\025\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\041\uffd2\042\uffd2\043\uffd2\046" +
    "\uffd2\001\002\000\044\007\uffc8\010\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\041\uffc8\042\uffc8\043\uffc8\046\uffc8" +
    "\001\002\000\012\007\ufff6\010\ufff6\024\034\025\035\001" +
    "\002\000\044\007\uffc7\010\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\041\uffc7\042\uffc7\043\uffc7\046\uffc7\001\002" +
    "\000\044\007\uffd3\010\uffd3\024\uffd3\025\uffd3\026\031\027" +
    "\030\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\041\uffd3\042\uffd3\043\uffd3\046\uffd3\001\002\000" +
    "\010\010\021\045\022\052\026\001\002\000\010\010\021" +
    "\045\022\052\026\001\002\000\044\007\uffca\010\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\041\uffca\042\uffca\043" +
    "\uffca\046\uffca\001\002\000\044\007\uffc9\010\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\046\uffc9\001\002\000\010\010\021\045\022\052\026\001" +
    "\002\000\010\010\021\045\022\052\026\001\002\000\044" +
    "\007\uffd4\010\uffd4\024\uffd4\025\uffd4\026\031\027\030\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\046\uffd4\001\002\000\044\007" +
    "\uffd5\010\uffd5\024\uffd5\025\uffd5\026\031\027\030\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\046\uffd5\001\002\000\010\024\034" +
    "\025\035\046\041\001\002\000\044\007\uffc5\010\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\046\uffc5\001\002\000\004\006\172\001\002\000\004" +
    "\013\045\001\002\000\012\010\072\015\071\020\064\022" +
    "\074\001\002\000\004\010\046\001\002\000\004\045\047" +
    "\001\002\000\004\010\050\001\002\000\004\050\167\001" +
    "\002\000\006\010\050\046\054\001\002\000\006\010\uffee" +
    "\046\uffee\001\002\000\006\010\uffed\046\uffed\001\002\000" +
    "\004\050\055\001\002\000\004\012\056\001\002\000\004" +
    "\051\057\001\002\000\004\006\060\001\002\000\016\005" +
    "\007\010\ufff9\011\ufff9\015\ufff9\020\ufff9\022\ufff9\001\002" +
    "\000\014\010\ufff4\011\042\015\ufff4\020\ufff4\022\ufff4\001" +
    "\002\000\012\010\072\015\071\020\064\022\074\001\002" +
    "\000\004\036\uffe9\001\002\000\004\045\105\001\002\000" +
    "\004\036\uffe7\001\002\000\004\036\163\001\002\000\004" +
    "\036\uffe8\001\002\000\004\036\uffea\001\002\000\004\045" +
    "\105\001\002\000\004\047\150\001\002\000\004\036\uffeb" +
    "\001\002\000\004\045\105\001\002\000\014\010\072\014" +
    "\100\015\071\020\064\022\074\001\002\000\004\036\104" +
    "\001\002\000\004\007\103\001\002\000\004\047\101\001" +
    "\002\000\012\010\021\044\023\045\022\052\026\001\002" +
    "\000\010\007\ufffb\024\034\025\035\001\002\000\012\010" +
    "\ufffc\015\ufffc\020\ufffc\022\ufffc\001\002\000\020\002\ufffe" +
    "\007\ufffe\010\ufffe\014\ufffe\015\ufffe\020\ufffe\022\ufffe\001" +
    "\002\000\016\010\021\037\116\040\117\044\023\045\121" +
    "\052\026\001\002\000\004\023\107\001\002\000\004\006" +
    "\110\001\002\000\012\010\072\015\071\020\064\022\074" +
    "\001\002\000\004\036\uffdf\001\002\000\014\007\113\010" +
    "\072\015\071\020\064\022\074\001\002\000\006\017\uffff" +
    "\036\uffff\001\002\000\010\041\142\042\144\046\143\001" +
    "\002\000\024\024\034\025\035\030\132\031\125\032\127" +
    "\033\133\034\126\035\134\043\131\001\002\000\012\036" +
    "\uffd1\041\uffd1\042\uffd1\046\uffd1\001\002\000\012\036\uffd0" +
    "\041\uffd0\042\uffd0\046\uffd0\001\002\000\012\036\uffce\041" +
    "\uffce\042\uffce\046\uffce\001\002\000\016\010\021\037\116" +
    "\040\117\044\023\045\121\052\026\001\002\000\012\036" +
    "\uffcb\041\uffcb\042\uffcb\046\uffcb\001\002\000\012\036\uffcf" +
    "\041\uffcf\042\uffcf\046\uffcf\001\002\000\026\024\034\025" +
    "\035\030\132\031\125\032\127\033\133\034\126\035\134" +
    "\043\131\046\041\001\002\000\012\010\uffda\044\uffda\045" +
    "\uffda\052\uffda\001\002\000\012\010\uffd7\044\uffd7\045\uffd7" +
    "\052\uffd7\001\002\000\012\010\uffd9\044\uffd9\045\uffd9\052" +
    "\uffd9\001\002\000\012\010\021\044\023\045\022\052\026" +
    "\001\002\000\012\010\021\044\023\045\022\052\026\001" +
    "\002\000\012\010\uffdb\044\uffdb\045\uffdb\052\uffdb\001\002" +
    "\000\012\010\uffd8\044\uffd8\045\uffd8\052\uffd8\001\002\000" +
    "\012\010\uffd6\044\uffd6\045\uffd6\052\uffd6\001\002\000\010" +
    "\024\034\025\035\041\136\001\002\000\012\010\021\044" +
    "\023\045\022\052\026\001\002\000\016\024\034\025\035" +
    "\036\uffde\041\uffde\042\uffde\046\uffde\001\002\000\010\024" +
    "\034\025\035\046\141\001\002\000\020\016\uffdd\021\uffdd" +
    "\023\uffdd\036\uffdd\041\uffdd\042\uffdd\046\uffdd\001\002\000" +
    "\016\010\021\037\116\040\117\044\023\045\121\052\026" +
    "\001\002\000\020\016\uffdc\021\uffdc\023\uffdc\036\uffdc\041" +
    "\uffdc\042\uffdc\046\uffdc\001\002\000\016\010\021\037\116" +
    "\040\117\044\023\045\121\052\026\001\002\000\010\024" +
    "\034\025\035\043\131\001\002\000\012\036\uffcc\041\uffcc" +
    "\042\uffcc\046\uffcc\001\002\000\012\036\uffcd\041\uffcd\042" +
    "\uffcd\046\uffcd\001\002\000\016\010\154\037\116\040\117" +
    "\044\023\045\121\052\026\001\002\000\010\036\uffe5\041" +
    "\142\042\144\001\002\000\012\024\034\025\035\036\uffe6" +
    "\043\131\001\002\000\004\036\uffe3\001\002\000\020\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\036\uffc6\043\uffc6\047\150" +
    "\001\002\000\004\036\uffe4\001\002\000\004\016\157\001" +
    "\002\000\004\006\110\001\002\000\006\017\161\036\uffe2" +
    "\001\002\000\004\006\110\001\002\000\004\036\uffe1\001" +
    "\002\000\020\002\ufffd\007\ufffd\010\ufffd\014\ufffd\015\ufffd" +
    "\020\ufffd\022\ufffd\001\002\000\004\021\165\001\002\000" +
    "\004\006\110\001\002\000\004\036\uffe0\001\002\000\004" +
    "\012\170\001\002\000\006\010\uffec\046\uffec\001\002\000" +
    "\014\002\000\010\072\015\071\020\064\022\074\001\002" +
    "\000\004\010\173\001\002\000\006\010\ufff0\050\ufff0\001" +
    "\002\000\006\007\ufff3\010\ufff3\001\002\000\006\010\201" +
    "\050\202\001\002\000\006\007\200\010\173\001\002\000" +
    "\006\007\ufff2\010\ufff2\001\002\000\014\010\ufff5\013\ufff5" +
    "\015\ufff5\020\ufff5\022\ufff5\001\002\000\006\010\uffef\050" +
    "\uffef\001\002\000\004\012\203\001\002\000\006\007\ufff1" +
    "\010\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\006\042\001\001\000\002" +
    "\001\001\000\006\004\011\005\012\001\001\000\002\001" +
    "\001\000\004\005\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\026\014\023\035\024\001\001\000\002" +
    "\001\001\000\010\013\026\014\023\035\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\032\001\001\000" +
    "\004\014\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\036\014\023\001\001\000\006\013\035\014" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\043\001\001\000\020\010\170\025\065\027\072\030\067" +
    "\031\062\032\066\033\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\050\024\051\001\001\000\002" +
    "\001\001\000\004\024\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\060\001\001\000" +
    "\004\006\061\001\001\000\020\010\074\025\065\027\072" +
    "\030\067\031\062\032\066\033\064\001\001\000\002\001" +
    "\001\000\004\034\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\105\001\001\000\020\025\075\026\076\027\072\030" +
    "\067\031\062\032\066\033\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\026\014" +
    "\023\035\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\026\014\023\016\121\017" +
    "\113\020\122\034\117\035\114\001\001\000\002\001\001" +
    "\000\004\021\110\001\001\000\020\010\111\025\065\027" +
    "\072\030\067\031\062\032\066\033\064\001\001\000\002" +
    "\001\001\000\016\025\075\027\072\030\067\031\062\032" +
    "\066\033\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\026\014\023\016\121" +
    "\017\113\020\122\034\117\035\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\026\014\023\035\137\001\001\000\010\013\026\014\023" +
    "\035\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\026\014\023" +
    "\035\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\013\026\014\023\016\146\020\122" +
    "\034\117\035\144\001\001\000\002\001\001\000\016\013" +
    "\026\014\023\016\145\020\122\034\117\035\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\013\026\014\023\016\121\017\150\020\122\027\154" +
    "\030\152\034\117\035\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\157\001\001\000" +
    "\002\001\001\000\004\021\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\025\075\027\072\030\067\031\062\032\066\033" +
    "\064\001\001\000\010\011\175\012\173\022\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\176\022\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {
  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= MAIN const vars func sentencias 
            {
              Object RESULT =null;
		  
                System.out.println("Soy un Programa");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVEABRE sentencias LLAVECIERRA 
            {
              Object RESULT =null;
		 System.out.println("Soy un bloque"); RESULT="bloque";
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("bloque",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencias ::= sentencias sentencia PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println("Soy muchas sentencias"); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencia PUNTO_COMA 
            {
              Object RESULT =null;
		System.out.println("Soy una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencias",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // func ::= FUNCTION ID PARENABRE parametros PARENCIERRA DOSPUNTOS TIPO IS LLAVEABRE const vars sentencias return LLAVECIERRA 
            {
              Object RESULT =null;
		
                System.out.println("SOY UNA FUNCION");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("func",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-13)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // return ::= RESULT IGUAL exp 
            {
              Object RESULT =null;
		
                System.out.println("SOY EL RETURN");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("return",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const ::= CONST LLAVEABRE constantes LLAVECIERRA 
            {
              Object RESULT =null;
		  
                System.out.println("SECTOR CONSTANTES");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("const",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const ::= 
            {
              Object RESULT =null;
		
                System.out.println("NO HAY CONSTANTES");
                RESULT=(Symbol) null;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("const",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constantes ::= constante 
            {
              Object RESULT =null;
		
                System.out.println("UNA CONSTANTE");

            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constantes",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constantes ::= constantes constante 
            {
              Object RESULT =null;
		
                System.out.println("VARIAS CONSTANTES");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constantes",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constante ::= ID DOSPUNTOS TIPO IGUAL exp 
            {
              Object RESULT =null;
		
                System.out.println("CONSTANTE");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vars ::= VARS LLAVEABRE variables LLAVECIERRA 
            {
              Object RESULT =null;
		  
                System.out.println("SECTOR VARIABLES");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("vars",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vars ::= 
            {
              Object RESULT =null;
		
                System.out.println("NO HAY VARIABLES");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("vars",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), (Symbol) RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables ::= variable 
            {
              Object RESULT =null;
		
                System.out.println("UNA VARIABLE");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= variables variable 
            {
              Object RESULT =null;
		
                System.out.println("VARIAS VARIABLES");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variables",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variable ::= ids DOSPUNTOS TIPO 
            {
              Object RESULT =null;
		
                System.out.println("VARIABLE");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ids ::= ID 
            {
              Object RESULT =null;
		
        System.out.println("UN ID");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ids ::= ids ID 
            {
              Object RESULT =null;
		
        System.out.println("VARIOS IDS");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ids",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametros ::= parametro 
            {
              Object RESULT =null;
		
        System.out.println("UN PARAMETRO");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros ::= parametros parametro 
            {
              Object RESULT =null;
		
        System.out.println("VARIOS PARAMETROS");


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("parametros",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametro ::= ID DOSPUNTOS TIPO 
            {
              Object RESULT =null;
		System.out.println("Soy un parametro"); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("parametro",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= asig 
            {
              Object RESULT =null;
		 System.out.println("Soy una asignacion simple en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= asigs 
            {
              Object RESULT =null;
		 System.out.println("Soy una asignacion compleja en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= if 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println(i);
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia ::= while 
            {
              Object RESULT =null;
		 System.out.println("Soy un while en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia ::= until 
            {
              Object RESULT =null;
		 System.out.println("Soy un until en una sentencia");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asig ::= ID IGUAL exp 
            {
              Object RESULT =null;
		
    System.out.println("soy una asignacion comun");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asig",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asig ::= ID IGUAL expbool 
            {
              Object RESULT =null;
		System.out.println("soy una asignacion booleana"); 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asig",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asigs ::= ID IGUAL asig 
            {
              Object RESULT =null;
		
    System.out.println("Soy una asignacion simple");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asigs",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asigs ::= ID IGUAL asigs 
            {
              Object RESULT =null;
		
    System.out.println("Soy una asignacion compleja");

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asigs",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF condicion THEN bloque 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                System.out.println("if " + c + " then " + b);
       
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF condicion THEN bloque ELSE bloque 
            {
              Object RESULT =null;
		
                System.out.println("Soy un if con else");
       
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("if",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // while ::= WHILE condicion DO bloque 
            {
              Object RESULT =null;
		System.out.println("Soy un while");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // until ::= UNTIL condicion REPEAT bloque 
            {
              Object RESULT =null;
		System.out.println("Soy un until");
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("until",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // between ::= exp BETWEEN exp AND exp 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println( e1 + " between " + e2 + " AND " + e3);
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("between",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= PARENABRE exp comparador exp PARENCIERRA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 RESULT= "(" + e + c+ e2+")";
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= PARENABRE expbool PARENCIERRA 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		 RESULT= "(" + e3 +")";
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("condicion",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= MAYOR 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 RESULT= ma;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= MENOR 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un menor");RESULT= me; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= EQUAL 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un igual");RESULT= eq; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparador ::= DIFF 
            {
              Object RESULT =null;
		int difleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int difright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object dif = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un distinto");RESULT= dif; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparador ::= MAYOREQUAL 
            {
              Object RESULT =null;
		int geleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int geright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ge = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un mayor o igual");RESULT= ge; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparador ::= MENOREQUAL 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un menor o igual");RESULT= me; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp MAS termino 
            {
              Object RESULT =null;
		
                System.out.println("expresion::=expresion+factor;");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp MENOS termino 
            {
              Object RESULT =null;
		
                System.out.println("expresion::=expresion-factor;");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("expresion::=termino;");
                RESULT= t;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		System.out.println("expresion::=string: " + s + ";");
                RESULT= s;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("exp",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // termbool ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("Soy un TRUE");
                RESULT= t;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // termbool ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un FALSE");
                RESULT= f;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termbool ::= between 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("expresion::=between;");
                RESULT= b;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termbool ::= condicion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy una condicion en termino bool");
                RESULT= c; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termbool",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expbool ::= expbool AND termbool 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un AND");RESULT= e1 +" and "+ e2; 
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expbool ::= expbool OR termbool 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 System.out.println("Soy un OR"); RESULT= e3 +" or "+ e4;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expbool ::= termbool 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		 
                 RESULT= t;
                
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expbool",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // termino ::= termino POR factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("termino::=factor*termino;");
                RESULT= t +" * "+ f;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // termino ::= termino DIVIDIDO factor 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                System.out.println("termino::=factor/termino;");
                RESULT= t1+ " / " + f1;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                 RESULT= f;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                RESULT= e;
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= ID 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                RESULT= identificador;
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= PARENABRE exp PARENCIERRA 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
                 RESULT= "("+e+")";
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
